using UnityEngine;
using System.Collections.Generic;
using Hell.Display;
using System;
using System.Collections;
using System.Reflection;
namespace Hell
{
    /// <summary>
    /// This class describes everything that can be placed in the board
    /// </summary>
    public class Socket : MonoBehaviour
    {
        [SerializeField]
        private Plan myPlan;

        public float planTime;

        /// <summary>
        /// The plan generated by this tablet
        /// </summary>
        public Plan MyPlan {
            get { return myPlan;}
            set { myPlan = value; }
        }

        /// <summary>
        /// Create a thread that waits for a plan to be made
        /// </summary>
        public virtual IEnumerator WaitForPlan() {
            Debug.Log("Normal Socket is waiting for plan");
            myPlan = null;
            yield return new WaitUntil(() => myPlan != null);
        }

        private CharacterInfo characterInfo; 

        /// <summary>
        /// All information about the character controlled by this socket (team, id, model)
        /// </summary>
        public CharacterInfo CharacterInfo {
            get{ return characterInfo; }
            set{
                SocketManager.s.OnCharacterInformationLoaded(this);
                characterInfo = value;
            }
        }

        private TabletInfo tabletInfo;

        /// <summary>
        /// All information about the tablet connected to this socket
        /// </summary>
        public TabletInfo TabletInfo {
            get { return tabletInfo; }
            set {
                SocketManager.s.OnSocketConnected(this);
                tabletInfo = value;
            }
        }

        private PawnInfo pawnInfo;

        /// <summary>
        /// the character controled by this socket
        /// </summary>
        public PawnInfo PawnInfo {
            get { return pawnInfo; }
            set { pawnInfo = value; }
        }

        public void ShowDeathScreen()
        {
            tabletInfo.tablet.photonView.RPC("ShowDeathScreen", tabletInfo.player);
        }

        public void Init()
        {
            StartCoroutine(HookDeathEvent());
        }

        public void OnGameEnd()
        {
            PawnInfo.MyPawn.OnDeath -= ShowDeathScreen;
        }

        public IEnumerator HookDeathEvent()
        {
            yield return new WaitWhile(() => PawnInfo == null);
            PawnInfo.MyPawn.OnDeath += ShowDeathScreen;
        }

        /// <summary>
        /// Coroutine that wait a plan to be made
        /// </summary>
        /// <returns></returns>
        public virtual IEnumerator WaitForPlans() {
            myPlan = null;

            yield return new WaitUntil(() => myPlan != null);
        }

        /// <summary>
        /// Wipes the socket
        /// </summary>
        public void WipeSocket() {

        }

        /// <summary>
        /// Implicity returns the tablet infor
        /// </summary>
        /// <param name="s"></param>
        public static implicit operator TabletInfo(Socket s) {
            return s.TabletInfo;
        }

        /// <summary>
        /// Implicity returns the Character info
        /// </summary>
        /// <param name="s"></param>
        public static implicit operator CharacterInfo(Socket s) {
            return s.CharacterInfo;
        }

        /// <summary>
        /// Implicit returns the pawn info
        /// </summary>
        /// <param name="s"></param>
        public static implicit operator PawnInfo(Socket s) {
            return s.PawnInfo;
        }

        /// <summary>
        /// Build a socket
        /// </summary>
        public Socket() {
            CharacterInfo = new CharacterInfo();
        }
    }

}